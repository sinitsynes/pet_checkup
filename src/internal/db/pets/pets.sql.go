// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: pets.sql

package pets

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPet = `-- name: CreatePet :exec
INSERT INTO pets (name, birth, passport, chip)
VALUES ($1, $2, $3, $4)
`

type CreatePetParams struct {
	Name     string      `json:"name"`
	Birth    pgtype.Date `json:"birth"`
	Passport pgtype.Text `json:"passport"`
	Chip     pgtype.Text `json:"chip"`
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) error {
	_, err := q.db.Exec(ctx, createPet,
		arg.Name,
		arg.Birth,
		arg.Passport,
		arg.Chip,
	)
	return err
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets WHERE id = $1
`

func (q *Queries) DeletePet(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePet, id)
	return err
}

const getPet = `-- name: GetPet :one
SELECT id, name, birth, passport, chip FROM pets WHERE id = $1
`

func (q *Queries) GetPet(ctx context.Context, id int32) (Pet, error) {
	row := q.db.QueryRow(ctx, getPet, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Birth,
		&i.Passport,
		&i.Chip,
	)
	return i, err
}

const updatePet = `-- name: UpdatePet :exec
UPDATE pets SET 
    name = coalesce($1, name), 
    birth = coalesce($2, birth), 
    passport = coalesce($3, passport), 
    chip = coalesce($4, chip)
WHERE id = $5
`

type UpdatePetParams struct {
	Name     string      `json:"name"`
	Birth    pgtype.Date `json:"birth"`
	Passport pgtype.Text `json:"passport"`
	Chip     pgtype.Text `json:"chip"`
	ID       int32       `json:"id"`
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) error {
	_, err := q.db.Exec(ctx, updatePet,
		arg.Name,
		arg.Birth,
		arg.Passport,
		arg.Chip,
		arg.ID,
	)
	return err
}
