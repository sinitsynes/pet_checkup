// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: measurement_units.sql

package measurement_units

import (
	"context"
)

const createMeasurementUnit = `-- name: CreateMeasurementUnit :exec
INSERT INTO panel_measurement_units (name, language_id)
VALUES ($1, (SELECT id FROM languages WHERE label=$2))
`

type CreateMeasurementUnitParams struct {
	Name  string `json:"name"`
	Label string `json:"label"`
}

func (q *Queries) CreateMeasurementUnit(ctx context.Context, arg CreateMeasurementUnitParams) error {
	_, err := q.db.Exec(ctx, createMeasurementUnit, arg.Name, arg.Label)
	return err
}

const getMeasurementUnit = `-- name: GetMeasurementUnit :one
SELECT id, name FROM panel_measurement_units WHERE language_id = (SELECT languages.id FROM languages WHERE label = $1) AND panel_measurement_units.id = $2
`

type GetMeasurementUnitParams struct {
	Label string `json:"label"`
	ID    int32  `json:"id"`
}

type GetMeasurementUnitRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetMeasurementUnit(ctx context.Context, arg GetMeasurementUnitParams) (GetMeasurementUnitRow, error) {
	row := q.db.QueryRow(ctx, getMeasurementUnit, arg.Label, arg.ID)
	var i GetMeasurementUnitRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getMeasurementUnits = `-- name: GetMeasurementUnits :many
SELECT id, name FROM panel_measurement_units WHERE language_id = (SELECT languages.id FROM languages WHERE label = $1)
`

type GetMeasurementUnitsRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetMeasurementUnits(ctx context.Context, label string) ([]GetMeasurementUnitsRow, error) {
	rows, err := q.db.Query(ctx, getMeasurementUnits, label)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMeasurementUnitsRow
	for rows.Next() {
		var i GetMeasurementUnitsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeasurementUnit = `-- name: UpdateMeasurementUnit :exec
UPDATE panel_measurement_units
SET name = $1
WHERE id = $2
`

type UpdateMeasurementUnitParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateMeasurementUnit(ctx context.Context, arg UpdateMeasurementUnitParams) error {
	_, err := q.db.Exec(ctx, updateMeasurementUnit, arg.Name, arg.ID)
	return err
}
