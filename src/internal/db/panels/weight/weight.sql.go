// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: weight.sql

package weight

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWeightMeasure = `-- name: CreateWeightMeasure :exec
INSERT INTO pet_weight (weight, date_measured, pet_id)
VALUES ($1, $2, $3)
`

type CreateWeightMeasureParams struct {
	Weight       float32     `json:"weight"`
	DateMeasured pgtype.Date `json:"date_measured"`
	PetID        int32       `json:"pet_id"`
}

func (q *Queries) CreateWeightMeasure(ctx context.Context, arg CreateWeightMeasureParams) error {
	_, err := q.db.Exec(ctx, createWeightMeasure, arg.Weight, arg.DateMeasured, arg.PetID)
	return err
}

const getWeightMeasures = `-- name: GetWeightMeasures :many
SELECT id, weight, date_measured, pet_id FROM pet_weight
WHERE pet_id = $1
`

func (q *Queries) GetWeightMeasures(ctx context.Context, petID int32) ([]PetWeight, error) {
	rows, err := q.db.Query(ctx, getWeightMeasures, petID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PetWeight
	for rows.Next() {
		var i PetWeight
		if err := rows.Scan(
			&i.ID,
			&i.Weight,
			&i.DateMeasured,
			&i.PetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeWeightMeasure = `-- name: RemoveWeightMeasure :exec
DELETE FROM pet_weight 
WHERE id = $1
`

func (q *Queries) RemoveWeightMeasure(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeWeightMeasure, id)
	return err
}
