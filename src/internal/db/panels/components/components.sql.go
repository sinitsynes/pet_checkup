// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: components.sql

package components

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPanelComponent = `-- name: CreatePanelComponent :one
INSERT INTO panel_components (name, unit_id, min_amount, max_amount, comment, language_id)
VALUES ($1, $2, $3, $4, $5, (SELECT id FROM languages WHERE label=$6))
RETURNING id
`

type CreatePanelComponentParams struct {
	Name      string      `json:"name"`
	UnitID    pgtype.Int4 `json:"unit_id"`
	MinAmount float32     `json:"min_amount"`
	MaxAmount float32     `json:"max_amount"`
	Comment   pgtype.Text `json:"comment"`
	Label     string      `json:"label"`
}

func (q *Queries) CreatePanelComponent(ctx context.Context, arg CreatePanelComponentParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPanelComponent,
		arg.Name,
		arg.UnitID,
		arg.MinAmount,
		arg.MaxAmount,
		arg.Comment,
		arg.Label,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getComponents = `-- name: GetComponents :many
SELECT panel_components.id,
	   panel_components.name,
	   panel_measurement_units.name AS unit,
	   min_amount,
	   max_amount,
	   comment
FROM panel_components
JOIN panel_measurement_units ON panel_components.unit_id = panel_measurement_units.id AND panel_components.language_id = panel_measurement_units.language_id
WHERE panel_components.language_id = (SELECT id FROM languages WHERE label=$1)
`

type GetComponentsRow struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Unit      string      `json:"unit"`
	MinAmount float32     `json:"min_amount"`
	MaxAmount float32     `json:"max_amount"`
	Comment   pgtype.Text `json:"comment"`
}

func (q *Queries) GetComponents(ctx context.Context, label string) ([]GetComponentsRow, error) {
	rows, err := q.db.Query(ctx, getComponents, label)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetComponentsRow
	for rows.Next() {
		var i GetComponentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Unit,
			&i.MinAmount,
			&i.MaxAmount,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
