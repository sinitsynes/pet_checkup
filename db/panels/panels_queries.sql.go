// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: panels_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMeasurement = `-- name: CreateMeasurement :exec
INSERT INTO panel_measurements (component_id, date_measured, pet_id, amount)
VALUES ($1, $2, $3, $4)
`

type CreateMeasurementParams struct {
	ComponentID  pgtype.Int4 `json:"component_id"`
	DateMeasured pgtype.Date `json:"date_measured"`
	PetID        pgtype.Int4 `json:"pet_id"`
	Amount       float32     `json:"amount"`
}

func (q *Queries) CreateMeasurement(ctx context.Context, arg CreateMeasurementParams) error {
	_, err := q.db.Exec(ctx, createMeasurement,
		arg.ComponentID,
		arg.DateMeasured,
		arg.PetID,
		arg.Amount,
	)
	return err
}

const createMeasurementUnit = `-- name: CreateMeasurementUnit :exec
INSERT INTO panel_units (name, language_id)
VALUES ($1, $2)
`

type CreateMeasurementUnitParams struct {
	Name       string      `json:"name"`
	LanguageID pgtype.Int4 `json:"language_id"`
}

func (q *Queries) CreateMeasurementUnit(ctx context.Context, arg CreateMeasurementUnitParams) error {
	_, err := q.db.Exec(ctx, createMeasurementUnit, arg.Name, arg.LanguageID)
	return err
}

const createPanelComponent = `-- name: CreatePanelComponent :one
INSERT INTO panel_components (name, unit_id, average_amount, comment, language_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreatePanelComponentParams struct {
	Name          string                       `json:"name"`
	UnitID        pgtype.Int4                  `json:"unit_id"`
	AverageAmount pgtype.Range[pgtype.Numeric] `json:"average_amount"`
	Comment       pgtype.Text                  `json:"comment"`
	LanguageID    pgtype.Int4                  `json:"language_id"`
}

func (q *Queries) CreatePanelComponent(ctx context.Context, arg CreatePanelComponentParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPanelComponent,
		arg.Name,
		arg.UnitID,
		arg.AverageAmount,
		arg.Comment,
		arg.LanguageID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getLanguageID = `-- name: GetLanguageID :one
SELECT id FROM languages WHERE label = $1
`

func (q *Queries) GetLanguageID(ctx context.Context, label string) (int32, error) {
	row := q.db.QueryRow(ctx, getLanguageID, label)
	var id int32
	err := row.Scan(&id)
	return id, err
}
