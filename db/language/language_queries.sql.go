// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: language_queries.sql

package db

import (
	"context"
)

const createLanguage = `-- name: CreateLanguage :one
INSERT INTO languages (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateLanguage(ctx context.Context, name string) (Language, error) {
	row := q.db.QueryRow(ctx, createLanguage, name)
	var i Language
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getLanguages = `-- name: GetLanguages :many
SELECT name
FROM languages
`

func (q *Queries) GetLanguages(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLanguage = `-- name: RemoveLanguage :exec
DELETE FROM languages
WHERE id = $1
`

func (q *Queries) RemoveLanguage(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeLanguage, id)
	return err
}
